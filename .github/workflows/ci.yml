name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  detect-package-manager:
    runs-on: ubuntu-latest
    outputs:
      pm: ${{ steps.detect.outputs.pm }}
      pm-version: ${{ steps.detect.outputs.pm-version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Detect Package Manager
        id: detect
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "pm=pnpm" >> $GITHUB_OUTPUT
            echo "pm-version=8" >> $GITHUB_OUTPUT
          elif [ -f "yarn.lock" ]; then
            echo "pm=yarn" >> $GITHUB_OUTPUT
            echo "pm-version=4" >> $GITHUB_OUTPUT
          else
            echo "pm=npm" >> $GITHUB_OUTPUT
            echo "pm-version=9" >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ubuntu-latest
    needs: detect-package-manager
    strategy:
      matrix:
        node-version: [18, 20]
        package-manager: [npm, yarn, pnpm]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Setup Package Manager
        run: |
          case "${{ matrix.package-manager }}" in
            "yarn")
              if command -v corepack >/dev/null 2>&1; then
                corepack enable
              else
                npm install -g yarn
              fi
              ;;
            "pnpm")
              if command -v corepack >/dev/null 2>&1; then
                corepack enable
              else
                npm install -g pnpm
              fi
              ;;
          esac
          
      - name: Get cache directory
        id: cache-dir
        run: |
          case "${{ matrix.package-manager }}" in
            "npm")
              echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
              ;;
            "yarn")
              echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
              ;;
            "pnpm")
              echo "dir=$(pnpm store path)" >> $GITHUB_OUTPUT
              ;;
          esac
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.package-manager }}-${{ matrix.node-version }}-${{ hashFiles('**/package*.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.package-manager }}-${{ matrix.node-version }}-
            
      - name: Install dependencies
        run: ./scripts/setup.sh ${{ matrix.package-manager }}
        
      - name: Generate LLM documentation
        run: |
          case "${{ matrix.package-manager }}" in
            "npm") npm run update-llm-docs ;;
            "yarn") yarn update-llm-docs ;;
            "pnpm") pnpm update-llm-docs ;;
          esac
          
      - name: Type check
        run: |
          case "${{ matrix.package-manager }}" in
            "npm") npm run build:types ;;
            "yarn") yarn build:types ;;
            "pnpm") pnpm build:types ;;
          esac
          
      - name: Lint
        run: |
          case "${{ matrix.package-manager }}" in
            "npm") npm run lint ;;
            "yarn") yarn lint ;;
            "pnpm") pnpm lint ;;
          esac
          
      - name: Build
        run: |
          case "${{ matrix.package-manager }}" in
            "npm") npm run build ;;
            "yarn") yarn build ;;
            "pnpm") pnpm build ;;
          esac
          
      - name: Build Storybook
        run: |
          case "${{ matrix.package-manager }}" in
            "npm") npm run build-storybook ;;
            "yarn") yarn build-storybook ;;
            "pnpm") pnpm build-storybook ;;
          esac

  deploy:
    runs-on: ubuntu-latest
    needs: [detect-package-manager, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Setup Package Manager
        run: |
          case "${{ needs.detect-package-manager.outputs.pm }}" in
            "yarn")
              if command -v corepack >/dev/null 2>&1; then
                corepack enable
              else
                npm install -g yarn
              fi
              ;;
            "pnpm")
              if command -v corepack >/dev/null 2>&1; then
                corepack enable
              else
                npm install -g pnpm
              fi
              ;;
          esac
          
      - name: Install dependencies
        run: ./scripts/setup.sh ${{ needs.detect-package-manager.outputs.pm }}
        
      - name: Build for production
        run: |
          case "${{ needs.detect-package-manager.outputs.pm }}" in
            "npm") npm run build:prod ;;
            "yarn") yarn build:prod ;;
            "pnpm") pnpm build:prod ;;
          esac
          
      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          case "${{ needs.detect-package-manager.outputs.pm }}" in
            "npm") npm publish ;;
            "yarn") yarn npm publish ;;
            "pnpm") pnpm publish ;;
          esac
