name: Publish to npm

on:
  push:
    branches: [main]
    paths-ignore:
      - "package.json"
      - "package-lock.json"
      - "mcp/**" # MCP has its own workflow
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_increment:
        description: "Version increment type"
        required: true
        default: "patch"
        type: "choice"
        options:
          - patch
          - minor
          - major

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: npm-publishing
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Check commit message
        id: check_commit
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"chore: bump version"* ]]; then
            echo "Skip workflow for version bump commits"
            echo "skip=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.head_commit.message }}" == *"chore: bump MCP server version"* ]]; then
            echo "Skip workflow for MCP version bump commits"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        if: steps.check_commit.outputs.skip != 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Setup .npmrc file to publish to npm
      - name: Setup Node.js
        if: steps.check_commit.outputs.skip != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"

      - name: Setup .npmrc manually
        if: steps.check_commit.outputs.skip != 'true'
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          cat ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify npm authentication
        if: steps.check_commit.outputs.skip != 'true'
        run: |
          echo "Checking npm authentication..."
          echo "Node auth token length: ${#NODE_AUTH_TOKEN}"
          echo "Registry: $(npm config get registry)"
          echo "Auth token exists: $([[ -n "$NODE_AUTH_TOKEN" ]] && echo "yes" || echo "no")"
          echo "Token prefix: ${NODE_AUTH_TOKEN:0:8}..."
          echo "Testing npm authentication..."
          if npm whoami; then
            echo "✅ NPM authentication successful"
            echo "Logged in as: $(npm whoami)"
          else
            echo "❌ NPM authentication failed"
            echo "Please check:"
            echo "1. NPM_TOKEN secret is valid and not expired"
            echo "2. Token has 'Automation' type for CI/CD"
            echo "3. Account has publish rights to @akitectio organization"
            echo "4. Organization exists and account is member"
            exit 1
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install dependencies
        if: steps.check_commit.outputs.skip != 'true'
        run: npm ci

      - name: Build package
        if: steps.check_commit.outputs.skip != 'true'
        run: npm run build

      - name: Configure git
        if: steps.check_commit.outputs.skip != 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Increment version
        if: steps.check_commit.outputs.skip != 'true'
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION_TYPE="${{ github.event.inputs.version_increment }}"
          else
            # Auto increment patch version for push events
            VERSION_TYPE="patch"
          fi
          NEW_VERSION=$(npm --no-git-tag-version version $VERSION_TYPE)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Incremented version to $NEW_VERSION"

      - name: Prepare package for publishing
        if: steps.check_commit.outputs.skip != 'true'
        run: |
          # Backup original files
          cp README.md README.md.backup

          # Use NPM README for publishing
          cp NPM_README.md README.md

      - name: Verify package before publishing
        if: steps.check_commit.outputs.skip != 'true'
        run: |
          echo "Package contents:"
          npm pack --dry-run
          echo ""
          echo "Checking npm authentication and package access..."
          if npm whoami; then
            NPM_USER=$(npm whoami)
            echo "✅ Authenticated as: $NPM_USER"
            
            # Check if we can access the package
            echo "Checking access to @akitectio/aki-ui..."
            if npm access list packages @akitectio 2>/dev/null; then
              echo "✅ Has access to @akitectio organization packages"
            else
              echo "⚠️  Cannot list @akitectio packages - checking individual package access..."
            fi
            
            # Check package info
            echo "Checking package info..."
            npm view @akitectio/aki-ui --json || echo "Package may not exist yet (first publish)"
          else
            echo "❌ NPM authentication failed"
            exit 1
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm
        if: steps.check_commit.outputs.skip != 'true'
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Restore original README
        if: steps.check_commit.outputs.skip != 'true'
        run: |
          mv README.md.backup README.md

      - name: Commit version bump and push
        if: steps.check_commit.outputs.skip != 'true'
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git tag "${{ steps.version.outputs.new_version }}"
          git push origin main
          git push origin "${{ steps.version.outputs.new_version }}"

      - name: Create GitHub Release
        if: steps.check_commit.outputs.skip != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          release_name: Release ${{ steps.version.outputs.new_version }}
          body: |
            ## Changes
            - Version bump to ${{ steps.version.outputs.new_version }}
            - Published to npm: https://www.npmjs.com/package/@akitectio/aki-ui

            ## Installation
            ```bash
            npm install @akitectio/aki-ui@${{ steps.version.outputs.new_version }}
            ```
          draft: false
          prerelease: false
