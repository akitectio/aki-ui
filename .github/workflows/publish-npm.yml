name: Publish to npm and Docker

on:
  workflow_dispatch:
    inputs:
      version_increment:
        description: "Version increment type"
        required: true
        default: "patch"
        type: "choice"
        options:
          - patch
          - minor
          - major

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE_NAME: tdduydev/aki-ui-mcp-server

# Sets permissions for npm publishing and Docker
permissions:
  contents: write
  actions: write
  id-token: write
  packages: write

jobs:
  publish-npm:
    runs-on: ubuntu-latest
    environment: npm-publishing
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Setup .npmrc file to publish to npm
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
          cache-dependency-path: |
            package-lock.json
            mcp/package-lock.json

      - name: Setup .npmrc manually
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          cat ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify npm authentication
        run: |
          echo "Checking npm authentication..."
          echo "Node auth token length: ${#NODE_AUTH_TOKEN}"
          echo "Registry: $(npm config get registry)"
          echo "Auth token exists: $([[ -n "$NODE_AUTH_TOKEN" ]] && echo "yes" || echo "no")"
          echo "Token prefix: ${NODE_AUTH_TOKEN:0:8}..."
          echo "Testing npm authentication..."
          if npm whoami; then
            echo "‚úÖ NPM authentication successful"
            echo "Logged in as: $(npm whoami)"
          else
            echo "‚ùå NPM authentication failed"
            echo "Please check:"
            echo "1. NPM_TOKEN secret is valid and not expired"
            echo "2. Token has 'Automation' type for CI/CD"
            echo "3. Account has publish rights to @akitectio organization"
            echo "4. Organization exists and account is member"
            exit 1
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            mcp/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json', 'mcp/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          # Install root dependencies
          npm ci --legacy-peer-deps

          # Install MCP dependencies
          cd mcp
          npm ci --legacy-peer-deps
          cd ../

          echo "‚úÖ Installed dependencies for root and MCP projects"

      - name: Build package
        run: npm run build

      - name: Configure git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Increment version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION_TYPE="${{ github.event.inputs.version_increment }}"
          else
            # Auto increment patch version for push events
            VERSION_TYPE="patch"
          fi
          NEW_VERSION=$(npm --no-git-tag-version version $VERSION_TYPE)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Incremented version to $NEW_VERSION"

      - name: Update LLM documentation
        run: |
          npm run sync-all-docs
          echo "Updated LLM documentation files with new version and component count"

      - name: Sync and publish MCP server
        run: |
          cd mcp
          # Extract version number without 'v' prefix
          MAIN_VERSION="${{ steps.version.outputs.new_version }}"
          VERSION_NUMBER="${MAIN_VERSION#v}"

          # Get package name from package.json
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "MCP Package name: $PACKAGE_NAME"

          # Get the latest published version from npm registry
          echo "Fetching latest MCP version from npm registry..."
          LATEST_NPM_VERSION=$(npm view "$PACKAGE_NAME" version 2>/dev/null || echo "0.0.0")
          echo "Latest MCP version on npm: $LATEST_NPM_VERSION"

          # Set the MCP version to match main version
          npm --no-git-tag-version version $VERSION_NUMBER
          echo "Synced MCP version to $VERSION_NUMBER"

          # Ensure dependencies are installed (should already be done in install step)
          if [ ! -d "node_modules" ]; then
            echo "Installing MCP dependencies..."
            npm ci --legacy-peer-deps
          fi

          # Sync component metadata before building MCP
          echo "üîÑ Syncing component metadata from Aki UI..."
          cd ../
          npm run mcp:sync-metadata
          cd mcp

          # Build MCP server with updated metadata
          npm run build

          # Verify package before publishing
          echo "MCP package contents:"
          npm pack --dry-run
          echo "About to publish MCP package:"
          cat package.json | grep -E '"name"|"version"' | head -2

          # Publish MCP server to npm
          npm publish --provenance --access public --legacy-peer-deps || {
            echo "MCP publish failed with error code $?"
            echo "Checking current npm version:"
            npm view "$PACKAGE_NAME" version
            echo "This could be due to the version not being incremented correctly."
            echo "Will continue with workflow but the MCP npm publish failed."
          }
          echo "‚úÖ Attempted to publish MCP server to npm"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Prepare package for publishing
        run: |
          # Backup original files
          cp README.md README.md.backup

          # Use NPM README for publishing
          cp NPM_README.md README.md

      - name: Verify package before publishing
        run: |
          echo "Package contents:"
          npm pack --dry-run
          echo ""
          echo "Checking npm authentication and package access..."
          if npm whoami; then
            NPM_USER=$(npm whoami)
            echo "‚úÖ Authenticated as: $NPM_USER"
            
            # Check if we can access the package
            echo "Checking access to @akitectio/aki-ui..."
            if npm access list packages @akitectio 2>/dev/null; then
              echo "‚úÖ Has access to @akitectio organization packages"
            else
              echo "‚ö†Ô∏è  Cannot list @akitectio packages - checking individual package access..."
            fi
            
            # Check package info
            echo "Checking package info..."
            npm view @akitectio/aki-ui --json || echo "Package may not exist yet (first publish)"
          else
            echo "‚ùå NPM authentication failed"
            exit 1
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm
        run: |
          npm publish --provenance --access public --legacy-peer-deps || {
            echo "Main package publish failed with error code $?"
            echo "Checking current npm version:"
            npm view @akitectio/aki-ui version
            echo "This could be due to the version not being incremented correctly."
            echo "Will continue with workflow but the npm publish failed."
          }
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Restore original README
        run: |
          mv README.md.backup README.md

      - name: Commit version bump and push
        run: |
          git add package.json package-lock.json mcp/package.json mcp/package-lock.json public/sitemap.xml public/robots.txt
          # Exclude llms.txt and llms-full.txt which are in .gitignore and change with each build
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }} (sync MCP + auto-discovery + sitemap)"
          git tag "${{ steps.version.outputs.new_version }}"
          git tag "mcp-${{ steps.version.outputs.new_version }}"
          git push origin main
          git push origin "${{ steps.version.outputs.new_version }}"
          git push origin "mcp-${{ steps.version.outputs.new_version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          release_name: Release ${{ steps.version.outputs.new_version }}
          body: |
            ## Changes
            - Version bump to ${{ steps.version.outputs.new_version }}
            - Published to npm: https://www.npmjs.com/package/@akitectio/aki-ui
            - MCP Server also published: https://www.npmjs.com/package/@akitectio/aki-ui-mcp-server

            ## Installation
            ### Main Package
            ```bash
            npm install @akitectio/aki-ui@${{ steps.version.outputs.new_version }}
            ```

            ### MCP Server
            ```bash
            npm install -g @akitectio/aki-ui-mcp-server@${{ steps.version.outputs.new_version }}
            ```
          draft: false
          prerelease: false

      - name: Create GitHub Release for MCP
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: mcp-${{ steps.version.outputs.new_version }}
          release_name: MCP Server Release ${{ steps.version.outputs.new_version }}
          body: |
            ## Aki UI MCP Server ${{ steps.version.outputs.new_version }}

            Model Context Protocol server for Aki UI component library integration with AI tools.

            ### Installation
            ```bash
            npm install -g @akitectio/aki-ui-mcp-server@${{ steps.version.outputs.new_version }}
            ```

            ### Configuration
            Add to your MCP client configuration:
            ```json
            {
              "mcpServers": {
                "aki-ui": {
                  "command": "aki-ui-mcp"
                }
              }
            }
            ```

            ### Features
            - Component discovery and documentation
            - Code generation with Aki UI components
            - Theme management and customization
            - Real-time integration with AI development tools

            See the [MCP README](https://github.com/akitectio/aki-ui/tree/main/mcp) for detailed usage instructions.

            ### Docker Image

            The MCP server is also available as a Docker image:
            ```bash
            docker pull ghcr.io/${{ github.repository_owner }}/aki-ui-mcp-server:${{ steps.version.outputs.new_version }}
            ```
          draft: false
          prerelease: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push MCP Docker image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: ./mcp
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/aki-ui-mcp-server:latest
            ghcr.io/${{ github.repository_owner }}/aki-ui-mcp-server:${{ steps.version.outputs.new_version }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/aki-ui-mcp-server:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/aki-ui-mcp-server:buildcache,mode=max

      - name: Echo Docker Image Digest
        run: echo "Docker Image Digest = ${{ steps.docker_build.outputs.digest }}"

      - name: Trigger website deployment
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy-website.yml/dispatches \
            -d '{"ref":"main"}'
