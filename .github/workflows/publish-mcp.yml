name: Publish MCP Server to npm

on:
  push:
    branches: [main]
    paths:
      - "mcp/**"
      - "!mcp/package.json"
      - "!mcp/package-lock.json"
  release:
    types: [published]
  repository_dispatch:
    types: [publish-mcp-sync]
  workflow_dispatch:
    inputs:
      version_increment:
        description: "Version increment type"
        required: true
        default: "patch"
        type: "choice"
        options:
          - patch
          - minor
          - major
      sync_mode:
        description: "Sync mode - if true, only publish without version bump"
        required: false
        default: false
        type: "boolean"

jobs:
  publish-mcp:
    runs-on: ubuntu-latest
    environment: npm-publishing
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Log event information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "Dispatch event type: ${{ github.event.action }}"
            echo "Triggered by: ${{ github.event.client_payload.triggered_by }}"
            echo "Sync mode: ${{ github.event.client_payload.sync_mode }}"
            echo "Version increment: ${{ github.event.client_payload.version_increment }}"
          fi

      - name: Check commit message
        id: check_commit
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"chore: bump MCP server version"* ]]; then
            echo "Skip workflow for MCP version bump commits"
            echo "skip=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.head_commit.message }}" == *"(sync MCP)"* ]]; then
            echo "Skip workflow for synced version commits"
            echo "skip=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.head_commit.message }}" == *"(sync MCP + trigger MCP publish)"* ]]; then
            echo "Skip workflow - MCP will be published via manual trigger"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        if: steps.check_commit.outputs.skip != 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        if: steps.check_commit.outputs.skip != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"

      - name: Setup .npmrc manually
        if: steps.check_commit.outputs.skip != 'true'
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          cat ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify npm authentication
        if: steps.check_commit.outputs.skip != 'true'
        run: |
          echo "Checking npm authentication..."
          echo "Node auth token length: ${#NODE_AUTH_TOKEN}"
          echo "Registry: $(npm config get registry)"
          echo "Auth token exists: $([[ -n "$NODE_AUTH_TOKEN" ]] && echo "yes" || echo "no")"
          echo "Token prefix: ${NODE_AUTH_TOKEN:0:8}..."
          echo "Testing npm authentication..."
          npm whoami || echo "❌ NPM authentication failed - please check NPM_TOKEN secret"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install MCP server dependencies
        if: steps.check_commit.outputs.skip != 'true'
        run: |
          cd mcp
          npm ci

      - name: Build MCP server
        if: steps.check_commit.outputs.skip != 'true'
        run: |
          cd mcp
          npm run build

      - name: Configure git
        if: steps.check_commit.outputs.skip != 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Increment MCP version
        if: steps.check_commit.outputs.skip != 'true'
        id: mcp_version
        run: |
          cd mcp
          # Check if we're in sync mode (called from main workflow or repository dispatch)
          SYNC_MODE="false"
          VERSION_TYPE="patch"

          # Handle workflow_dispatch inputs
          if [ "${{ github.event.inputs.sync_mode }}" = "true" ]; then
            SYNC_MODE="true"
          fi

          if [ "${{ github.event.inputs.version_increment }}" != "" ]; then
            VERSION_TYPE="${{ github.event.inputs.version_increment }}"
          fi

          # Handle repository_dispatch (from npm publish workflow)
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            if [ "${{ github.event.client_payload.sync_mode }}" = "true" ]; then
              SYNC_MODE="true"
            fi
            if [ "${{ github.event.client_payload.version_increment }}" != "" ]; then
              VERSION_TYPE="${{ github.event.client_payload.version_increment }}"
            fi
            echo "📦 Triggered by: ${{ github.event.client_payload.triggered_by }}"
          fi

          # Get package name from package.json
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "Package name: $PACKAGE_NAME"

          # Get the latest published version from npm registry
          echo "Fetching latest version from npm registry..."
          LATEST_NPM_VERSION=$(npm view "$PACKAGE_NAME" version 2>/dev/null || echo "0.0.0")
          echo "Latest version on npm: $LATEST_NPM_VERSION"

          # Get current local version
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          echo "Local package.json version: $LOCAL_VERSION"

          if [ "$SYNC_MODE" = "true" ]; then
            # Sync mode: use the latest npm version
            echo "new_version=v$LATEST_NPM_VERSION" >> $GITHUB_OUTPUT
            echo "Sync mode: Using latest npm version v$LATEST_NPM_VERSION"
          else
            # Normal mode: increment from the latest npm version, not local version
            # First, update local package.json to match npm version
            npm --no-git-tag-version version "$LATEST_NPM_VERSION" 2>/dev/null || true
            echo "Updated local version to match npm: $LATEST_NPM_VERSION"
            
            # Then increment from there
            NEW_VERSION=$(npm --no-git-tag-version version $VERSION_TYPE)
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Incremented MCP version from $LATEST_NPM_VERSION to $NEW_VERSION"
          fi

      - name: Verify MCP package before publishing
        if: steps.check_commit.outputs.skip != 'true'
        run: |
          cd mcp
          echo "MCP package contents:"
          npm pack --dry-run
          echo "Current npm user:"
          npm whoami
          echo "Package name from package.json:"
          cat package.json | grep '"name"' | head -1
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish MCP server to npm
        if: steps.check_commit.outputs.skip != 'true'
        run: |
          cd mcp
          echo "About to publish package:"
          cat package.json | grep -E '"name"|"version"' | head -2
          npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Commit MCP version bump and push
        if: steps.check_commit.outputs.skip != 'true' && github.event.inputs.sync_mode != 'true' && github.event.client_payload.sync_mode != 'true'
        run: |
          git add mcp/package.json mcp/package-lock.json
          git commit -m "chore: bump MCP server version to ${{ steps.mcp_version.outputs.new_version }}"
          git tag "mcp-${{ steps.mcp_version.outputs.new_version }}"
          git push origin main
          git push origin "mcp-${{ steps.mcp_version.outputs.new_version }}"

      - name: Create GitHub Release for MCP
        if: steps.check_commit.outputs.skip != 'true' && github.event.inputs.sync_mode != 'true' && github.event.client_payload.sync_mode != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: mcp-${{ steps.mcp_version.outputs.new_version }}
          release_name: MCP Server Release ${{ steps.mcp_version.outputs.new_version }}
          body: |
            ## Aki UI MCP Server ${{ steps.mcp_version.outputs.new_version }}

            Model Context Protocol server for Aki UI component library integration with AI tools.

            ### Installation
            ```bash
            npm install -g @akitectio/aki-ui-mcp@${{ steps.mcp_version.outputs.new_version }}
            ```

            ### Configuration
            Add to your MCP client configuration:
            ```json
            {
              "mcpServers": {
                "aki-ui": {
                  "command": "aki-ui-mcp"
                }
              }
            }
            ```

            ### Features
            - Component discovery and documentation
            - Code generation with Aki UI components
            - Theme management and customization
            - Real-time integration with AI development tools

            See the [MCP README](https://github.com/akitectio/aki-ui/tree/main/mcp) for detailed usage instructions.
          draft: false
          prerelease: false
