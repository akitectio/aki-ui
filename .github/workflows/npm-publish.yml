name: Build, Publish and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_increment:
        description: "Version increment type"
        required: true
        default: "patch"
        type: "choice"
        options:
          - patch
          - minor
          - major

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-publish:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Increment version
        id: increment_version
        run: |
          # Determine version increment type
          VERSION_TYPE="${{ github.event.inputs.version_increment || 'patch' }}"

          # Use npm version to increment and get new version
          NEW_VERSION=$(npm --no-git-tag-version version $VERSION_TYPE)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Incremented version from ${{ steps.current_version.outputs.version }} to $NEW_VERSION"

      - name: Build package
        run: npm run build

      - name: Update package.json and README
        run: |
          # Make a copy of the original package.json for publishing
          cp package.json package.json.original

          # Remove the "private" field from package.json for publishing
          jq 'del(.private)' package.json > package.json.tmp
          mv package.json.tmp package.json

          # Replace README.md with NPM_README.md for publishing
          cp NPM_README.md README.md.original
          cp NPM_README.md README.md

      - name: Debug environment and npm setup
        run: |
          echo "=== Environment Debug ==="
          echo "NODE_AUTH_TOKEN length: ${#NODE_AUTH_TOKEN}"
          echo "NODE_AUTH_TOKEN starts with: ${NODE_AUTH_TOKEN:0:8}..."
          echo "Current directory: $(pwd)"
          echo "Home directory: $HOME"
          echo ""
          echo "=== NPM Debug ==="
          echo "NPM version: $(npm --version)"
          echo "Node version: $(node --version)"
          echo ""
          echo "=== .npmrc Debug ==="
          echo "Global .npmrc location: $HOME/.npmrc"
          if [ -f "$HOME/.npmrc" ]; then
            echo ".npmrc exists at $HOME/.npmrc"
            echo ".npmrc content (masked):"
            sed 's/npm_[A-Za-z0-9]*/npm_***MASKED***/g' "$HOME/.npmrc"
          else
            echo "No .npmrc found at $HOME/.npmrc"
          fi
          echo ""
          echo "Local .npmrc in project:"
          if [ -f ".npmrc" ]; then
            echo "Local .npmrc exists"
            cat .npmrc
          else
            echo "No local .npmrc"
          fi
          echo ""
          echo "=== NPM Config ==="
          npm config list
          echo ""
          echo "Registry: $(npm config get registry)"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create .npmrc file manually
        run: |
          echo "Creating .npmrc file manually..."
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc
          echo ""
          echo "Created .npmrc file with content (masked):"
          sed 's/npm_[A-Za-z0-9]*/npm_***MASKED***/g' ~/.npmrc
          echo ""
          echo "File permissions:"
          ls -la ~/.npmrc

      - name: Verify npm authentication
        run: npm whoami

      - name: Check package info before publishing
        run: |
          echo "Package name: $(node -p "require('./package.json').name")"
          echo "Package version: $(node -p "require('./package.json').version")"
          echo "Registry: $(npm config get registry)"

          # Check if this is a scoped package
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          if [[ $PACKAGE_NAME == @* ]]; then
            ORG_NAME=$(echo $PACKAGE_NAME | cut -d'/' -f1 | cut -d'@' -f2)
            echo "This is a scoped package for organization: $ORG_NAME"
            echo "Make sure the organization '$ORG_NAME' exists on npm and you have permission to publish to it."
            echo "You can create an organization at: https://www.npmjs.com/org/create"
          fi

      - name: Publish to NPM
        id: npm_publish
        run: npm publish --provenance --access public

      - name: Restore original files for commit
        if: success()
        run: |
          # Restore the original README.md
          mv README.md.original README.md

          # We don't restore package.json because we want to keep the incremented version

      - name: Commit and push version bump
        if: success()
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.increment_version.outputs.new_version }}"
          git tag ${{ steps.increment_version.outputs.new_version }}
          git push
          git push --tags

      # Only build and deploy Storybook if npm publish was successful
      - name: Build Storybook
        if: success()
        run: npm run build-storybook:gh-pages

      - name: Add .nojekyll file
        if: success()
        run: touch storybook-static/.nojekyll

      - name: Setup Pages
        if: success()
        uses: actions/configure-pages@v4

      - name: Upload artifact
        if: success()
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./storybook-static"

      - name: Deploy to GitHub Pages
        if: success()
        id: deployment
        uses: actions/deploy-pages@v4
