name: Build and Deploy Storybook

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_increment:
        description: "Version increment type"
        required: true
        default: "patch"
        type: "choice"
        options:
          - patch
          - minor
          - major

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-publish:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Increment version
        id: increment_version
        run: |
          # Determine version increment type
          VERSION_TYPE="${{ github.event.inputs.version_increment || 'patch' }}"

          # Use npm version to increment and get new version
          NEW_VERSION=$(npm --no-git-tag-version version $VERSION_TYPE)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Incremented version from ${{ steps.current_version.outputs.version }} to $NEW_VERSION"

      - name: Build package
        run: npm run build

      - name: Update package.json and README
        run: |
          # Make a copy of the original package.json for publishing
          cp package.json package.json.original

          # Remove the "private" field from package.json for publishing
          jq 'del(.private)' package.json > package.json.tmp
          mv package.json.tmp package.json

          # Replace README.md with NPM_README.md for publishing
          cp NPM_README.md README.md.original
          cp NPM_README.md README.md

      # T·∫°m th·ªùi b·ªè qua vi·ªác npm publish (ƒëang g·∫∑p v·∫•n ƒë·ªÅ x√°c th·ª±c)
      - name: Skip npm publish and log version info
        id: npm_publish
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          PKG_NAME=$(node -p "require('./package.json').name")
          echo "üìù B·ªè qua vi·ªác npm publish"
          echo "  Package: $PKG_NAME"
          echo "  Version: $PKG_VERSION"
          echo "  L√Ω do: ƒêang g·∫∑p v·∫•n ƒë·ªÅ x√°c th·ª±c v·ªõi npm"

      - name: Restore original files for commit
        run: |
          # Restore the original README.md
          mv README.md.original README.md

          # We don't restore package.json because we want to keep the incremented version

      - name: Commit and push version bump
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.increment_version.outputs.new_version }}"
          git tag ${{ steps.increment_version.outputs.new_version }}
          git push
          git push --tags

      # Only build and deploy Storybook
      - name: Build Storybook
        run: npm run build-storybook:gh-pages

      - name: Add .nojekyll file
        run: touch storybook-static/.nojekyll

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./storybook-static"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
